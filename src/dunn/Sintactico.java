
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package dunn;

import java_cup.runtime.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated Sintactico.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\007\000\002\010" +
    "\004\000\002\010\005\000\002\015\003\000\002\015\003" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\016\003\000\002\016\005\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\011" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\005\006\000" +
    "\002\017\003\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\006\005\000\002\006" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\007\003\000\002\007\005\000\002\007\004\000\002" +
    "\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\011\004\001\002\000\014\021\013\022" +
    "\010\023\016\024\007\025\012\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\006\012\ufffc\017" +
    "\ufffc\001\002\000\006\012\ufff9\017\ufff9\001\002\000\006" +
    "\012\ufff8\017\100\001\002\000\006\012\ufffd\017\ufffd\001" +
    "\002\000\040\002\uffdb\004\uffdb\005\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\001\002\000\004\012\023" +
    "\001\002\000\006\024\017\025\020\001\002\000\040\002" +
    "\uffda\004\uffda\005\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\001\002\000\006\021\013\023\016\001\002" +
    "\000\006\021\013\023\016\001\002\000\006\012\ufffa\017" +
    "\ufffa\001\002\000\006\012\ufffb\017\ufffb\001\002\000\014" +
    "\021\013\022\047\023\016\024\051\025\044\001\002\000" +
    "\006\010\026\012\025\001\002\000\014\021\013\022\047" +
    "\023\016\024\051\025\044\001\002\000\016\020\035\021" +
    "\013\022\031\023\016\024\033\025\030\001\002\000\022" +
    "\002\uffde\013\041\020\035\021\013\022\031\023\016\024" +
    "\033\025\030\001\002\000\022\002\uffe0\013\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\001\002\000" +
    "\022\002\uffdf\013\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\001\002\000\022\002\uffe1\013\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\001\002" +
    "\000\022\002\uffe4\013\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\001\002\000\004\002\000\001\002" +
    "\000\022\002\uffe3\013\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\001\002\000\006\020\035\024\033" +
    "\001\002\000\006\021\013\023\016\001\002\000\022\002" +
    "\uffe2\013\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\001\002\000\016\020\035\021\013\022\031\023" +
    "\016\024\033\025\030\001\002\000\004\002\uffdc\001\002" +
    "\000\004\002\uffdd\001\002\000\012\004\ufff4\005\ufff4\014" +
    "\ufff4\016\ufff4\001\002\000\006\010\ufff1\012\ufff1\001\002" +
    "\000\012\004\ufff5\005\ufff5\014\ufff5\016\ufff5\001\002\000" +
    "\012\004\ufff3\005\ufff3\014\ufff3\016\ufff3\001\002\000\006" +
    "\010\ufff0\012\ufff0\001\002\000\016\004\ufff2\005\ufff2\014" +
    "\ufff2\016\ufff2\021\ufff2\023\ufff2\001\002\000\012\004\060" +
    "\005\057\014\062\016\061\001\002\000\004\024\051\001" +
    "\002\000\006\010\ufffe\012\ufffe\001\002\000\006\021\013" +
    "\023\016\001\002\000\012\004\ufff6\005\ufff6\014\ufff6\016" +
    "\ufff6\001\002\000\006\010\uffee\012\uffee\001\002\000\006" +
    "\010\uffef\012\uffef\001\002\000\006\010\uffed\012\uffed\001" +
    "\002\000\014\021\013\022\064\023\016\024\066\025\063" +
    "\001\002\000\006\013\uffe8\015\uffe8\001\002\000\006\013" +
    "\uffe7\015\uffe7\001\002\000\006\013\uffe9\015\uffe9\001\002" +
    "\000\012\013\uffeb\015\uffeb\021\uffeb\023\uffeb\001\002\000" +
    "\004\024\066\001\002\000\006\013\073\015\uffe5\001\002" +
    "\000\004\015\072\001\002\000\006\010\uffec\012\uffec\001" +
    "\002\000\014\021\013\022\064\023\016\024\066\025\063" +
    "\001\002\000\004\015\uffe6\001\002\000\006\021\013\023" +
    "\016\001\002\000\006\013\uffea\015\uffea\001\002\000\006" +
    "\010\uffff\012\uffff\001\002\000\014\021\013\022\010\023" +
    "\016\024\007\025\012\001\002\000\004\012\ufff7\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\002\004\001\001\000\010\015\010\016" +
    "\013\021\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\021\001" +
    "\001\000\004\021\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\076\004\044\005\047\011\045\012" +
    "\051\021\052\001\001\000\002\001\001\000\016\003\053" +
    "\004\044\005\047\011\045\012\051\021\052\001\001\000" +
    "\012\007\033\013\031\014\026\021\035\001\001\000\012" +
    "\007\041\013\031\014\026\021\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\036\001" +
    "\001\000\004\021\037\001\001\000\002\001\001\000\012" +
    "\007\042\013\031\014\026\021\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\054\001\001" +
    "\000\002\001\001\000\004\021\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\070\017\064\020\067\021\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\073\017\064" +
    "\020\067\021\066\001\001\000\002\001\001\000\004\021" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\010\016\100\021\014\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol s){
JOptionPane.showMessageDialog(null,"Error en la linea "+(s.right+1)+" Columna "+s.left+" Identificador "
+s.value+" no reconocido. ");

}

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
JOptionPane.showMessageDialog(null,"Error en la linea "+(s.right+1)+" Columna "+s.left+" Identificador "
+s.value+" no reconocido. ");
}
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


ArrayList <Elementos> data=new ArrayList();
ArrayList dataset=new ArrayList();

int num_var=0; // numero de varibles
boolean num_ins=false;
 public void ImprimeValor(String str){
  System.out.println("elr del token"+str) ;
   }
/*public void agregar(String str){
  dataset.add(str);
   }*/

  private final Sintactico parser;

  /** Constructor */
  CUP$parser$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Estructura EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Estructura ::= p_relation nombre dec_atributos p_data datos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_atributos ::= p_attribute atributos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_atributos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_atributos ::= dec_atributos p_attribute atributos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_atributos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nombr ::= palabra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nombr ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nombr ::= comi numero comi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombr ::= comi palabra comi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombr ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nombre ::= nombr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nombre ::= nombr punto nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tokens ::= comi token comi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tokens ::= token 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tokens ::= palabra 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		data.add(new Elementos()); 
data.get(num_var).setNombre(str);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tokens ::= cadena 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		data.add(new Elementos());
str=str.substring(1,str.length()-1);
data.get(num_var).setNombre(str);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // token ::= numero 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		data.add(new Elementos());
data.get(num_var).setNombre(str);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("token",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atributos ::= numericos 
            {
              Object RESULT =null;
		num_var++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atributos ::= nominales 
            {
              Object RESULT =null;
		num_var++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numericos ::= tokens numeric 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numericos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numericos ::= tokens p_integer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numericos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numericos ::= tokens p_real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numericos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nominales ::= tokens abrep variables cierrap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nominales",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // varia ::= numero 
            {
              Object RESULT =null;
		int str1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int str1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		data.get(num_var).agregarValor(str1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variab ::= comi varia comi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variab",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variab ::= varia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variab",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variab ::= palabra 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		data.get(num_var).agregarValor(str);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variab",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variab ::= cadena 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		str=str.substring(1,str.length()-1);
data.get(num_var).agregarValor(str);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variab",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variables ::= variab coma variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variables ::= variab 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // token1 ::= numero 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dataset.add(str);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("token1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // token1 ::= interrogacion 
            {
              Object RESULT =null;
		dataset.add(0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("token1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tokens1 ::= comi token1 comi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tokens1 ::= token1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tokens1 ::= palabra 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dataset.add(str);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tokens1 ::= cadena 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		str=str.substring(1,str.length()-1);
dataset.add(str);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // datos ::= tokens1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // datos ::= tokens1 coma datos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // datos ::= tokens1 datos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comi ::= comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comi",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comi ::= comilla_doble 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comi",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
    }

}
